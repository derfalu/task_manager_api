import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../..")))

from app.db.database import SessionLocal
from app.models.user import User
from app.models.task import Task
from app.models.tag import Tag
from sqlalchemy.exc import IntegrityError
from app.services.user_service import get_password_hash


def seed_users(db):
    print("üîπ –°–µ–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    if not db.query(User).first():
        hash_pass_1 = get_password_hash("admin_password")
        hash_pass_2 = get_password_hash("demo_password")
        admin = User(
            username="admin",
            email="admin@example.com",
            hashed_password=hash_pass_1, 
        )
        demo = User(
            username="demo",
            email="demo@example.com",
            hashed_password=hash_pass_2,
        )
        db.add_all([admin, demo])
        db.commit()
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")


def seed_tags(db):
    print("üîπ –°–µ–µ–º —Ç–µ–≥–∏...")

    user = db.query(User).filter_by(username="admin").first()
    if not user:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'admin' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–æ–≤.")
        return

    tags = ["urgent", "work", "personal"]

    existing = db.query(Tag).filter(Tag.name.in_(tags), Tag.user_id == user.id).all()
    existing_names = {t.name for t in existing}

    new_tags = [
        Tag(name=name, user_id=user.id) for name in tags if name not in existing_names
    ]

    if new_tags:
        db.add_all(new_tags)
        db.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ–≥–æ–≤: {len(new_tags)}")
    else:
        print("‚ÑπÔ∏è –¢–µ–≥–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")


def seed_tasks(db):
    print("üîπ –°–µ–µ–º –∑–∞–¥–∞—á–∏...")

    user = db.query(User).filter_by(username="admin").first()
    if not user:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'admin' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á.")
        return

    existing_tasks = db.query(Task).filter(Task.user_id == user.id).first()
    if existing_tasks:
        print("‚ÑπÔ∏è –ó–∞–¥–∞—á–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏
    tags_by_name = {
        tag.name: tag for tag in db.query(Tag).filter(Tag.user_id == user.id).all()
    }

    # –ó–∞–¥–∞—á–∏ —Å —Ç–µ–≥–∞–º–∏
    tasks_data = [
        {
            "title": "–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
            "description": "–ó–∞–∫–æ–Ω—á–∏—Ç—å FastAPI –ø—Ä–æ–µ–∫—Ç",
            "tags": ["work", "urgent"],
        },
        {
            "title": "–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é",
            "description": "–ò–∑—É—á–∏—Ç—å Docker Compose best practices",
            "tags": ["work"],
        },
        {
            "title": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å email",
            "description": "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞–∂–Ω—ã–µ –ø–∏—Å—å–º–∞",
            "tags": ["urgent"],
        },
        {
            "title": "–ü–æ–≥—É–ª—è—Ç—å",
            "description": "–ü—Ä–æ–π—Ç–∏—Å—å –ø–æ –ø–∞—Ä–∫—É",
            "tags": ["personal"],
        },
        {
            "title": "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã",
            "description": "–ú–æ–ª–æ–∫–æ, —è–π—Ü–∞, —Ö–ª–µ–±",
            "tags": ["personal", "urgent"],
        },
        {
            "title": "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ",
            "description": "–£–∑–Ω–∞—Ç—å, –∫–∞–∫ –¥–µ–ª–∞",
            "tags": ["personal"],
        },
        {
            "title": "–°–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø",
            "description": "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "tags": ["work"],
        },
        {
            "title": "–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
            "description": "–ó–∞–ø—É—Å—Ç–∏—Ç—å pip install -r requirements.txt",
            "tags": ["work"],
        },
        {
            "title": "–ó–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ",
            "description": "–û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ –ø–æ FastAPI",
            "tags": ["work"],
        },
        {
            "title": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Vue",
            "description": "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∫ API",
            "tags": ["work", "urgent"],
        },
        {
            "title": "–£—Å—Ç—Ä–æ–∏—Ç—å —É–±–æ—Ä–∫—É",
            "description": "–ü–æ—Ä—è–¥–æ–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ –∏ –≤ –∫–æ–º–Ω–∞—Ç–µ",
            "tags": ["personal"],
        },
        {
            "title": "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É",
            "description": "–ó–∞–∫–æ–Ω—á–∏—Ç—å ¬´–ß–∏—Å—Ç—ã–π –∫–æ–¥¬ª",
            "tags": ["personal", "work"],
        },
        {
            "title": "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API",
            "description": "–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç—ã –Ω–∞ –≤—Å–µ endpoints",
            "tags": ["work"],
        },
        {
            "title": "–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ª–æ–≥–∞–º–∏",
            "description": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ docker-compose logs",
            "tags": ["work"],
        },
    ]

    tasks = []
    for data in tasks_data:
        task = Task(
            title=data["title"],
            description=data["description"],
            user_id=user.id,
            tags=[tags_by_name[tag] for tag in data["tags"] if tag in tags_by_name],
        )
        tasks.append(task)

    db.add_all(tasks)
    db.commit()
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")


def run():
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    db = SessionLocal()
    try:
        seed_users(db)
        seed_tags(db)
        seed_tasks(db)
    except IntegrityError as e:
        print(f"‚ö†Ô∏è IntegrityError: {e}")
        db.rollback()
    finally:
        db.close()
        print("üèÅ –°–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


if __name__ == "__main__":
    run()
