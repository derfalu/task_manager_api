from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from app.schemas.task import TaskCreate, TaskRead, StatusEnum, TaskUpdate
from app.db.deps import get_db
from app.core.deps import get_current_user
from app.services import task_service
from app.models.user import User
from datetime import datetime

router = APIRouter(prefix="/tasks", tags=["–ó–∞–¥–∞—á–∏ üéØ"])


@router.post(
    "/",
    response_model=TaskRead,
    summary="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É",
    description="""
–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞—Ç—å:
- –Ω–∞–∑–≤–∞–Ω–∏–µ
- –æ–ø–∏—Å–∞–Ω–∏–µ
- —Å—Ç–∞—Ç—É—Å (`new`, `in_progress`, `done`)
- —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Ç–æ —Å–æ–∑–¥–∞—é—Ç—Å—è)
""",
)
def create_task(
    task_in: TaskCreate,
    db: Session = Depends(get_db),
    user: User = Depends(get_current_user),
):
    return task_service.create_task(db, user, task_in)


@router.get(
    "/",
    response_model=list[TaskRead],
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
    description="""
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–§–∏–ª—å—Ç—Ä—ã:
- —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ (`new`, `in_progress`, `done`)
- –¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç –∏ –¥–æ)
- –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–µ–≥—É (`tag_id`)
- —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ä–æ–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
""",
)
def read_tasks(
    status: StatusEnum | None = Query(default=None),
    due_from: datetime | None = Query(default=None),
    due_to: datetime | None = Query(default=None),
    tag_id: int | None = Query(default=None),
    sort_by_due_date: bool = Query(default=False),
    db: Session = Depends(get_db),
    user: User = Depends(get_current_user),
):
    return task_service.get_user_tasks(
        db,
        user,
        status=status,
        due_from=due_from,
        due_to=due_to,
        tag_id=tag_id,
        sort_by_due_date=sort_by_due_date,
    )


@router.get(
    "/{task_id}",
    response_model=TaskRead,
    summary="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ –µ—ë ID, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
)
def read_task(
    task_id: int, db: Session = Depends(get_db), user: User = Depends(get_current_user)
):
    task = task_service.get_task_by_id(db, user, task_id)
    if not task:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return task


@router.patch(
    "/{task_id}",
    response_model=TaskRead,
    summary="–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
    description="–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –ª—é–±—É—é —á–∞—Å—Ç—å –∑–∞–¥–∞—á–∏: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Ç–∞—Ç—É—Å, —Å—Ä–æ–∫ –∏–ª–∏ —Ç–µ–≥–∏",
)
def update_task(
    task_id: int,
    task_in: TaskUpdate,
    db: Session = Depends(get_db),
    user: User = Depends(get_current_user),
):
    return task_service.update_task(db, user, task_id, task_in)


@router.delete(
    "/{task_id}",
    status_code=204,
    summary="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É",
    description="–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
)
def delete_task(
    task_id: int, db: Session = Depends(get_db), user: User = Depends(get_current_user)
):
    task_service.delete_task(db, user, task_id)
